@model List<Music.Dtos.UserDto>

@{
    ViewData["Title"] = "Search Users";
    Layout = "_Layout";

    // Retrieve the search query from the HTTP context
    var searchQuery = ViewContext.HttpContext.Request.Query["query"];
}

<div class="container mt-4">
    <h1 class="text-center mb-4">Search Users</h1>

    <!-- Search Bar -->
    <form id="searchForm" class="d-flex mb-4" method="get" action="@Url.Action("Search", "Users")">
        <input type="text" id="searchInput" name="query" class="form-control me-2" placeholder="Search users by username..." value="@searchQuery" />
        <button type="submit" class="btn btn-primary">Search</button>
    </form>

    <!-- Users List -->
    @if (Model.Any())
    {
        <div class="list-group">
            @foreach (var user in Model)
            {
                <a href="@Url.Action("Profile", "Users", new { id = user.Id })" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                    <span class="fw-bold">@user.Username</span>
                    <small class="text-muted">@user.ReviewCount reviews</small>
                </a>
            }
        </div>
    }
    else
    {
        <p class="text-muted text-center">No users found matching your query.</p>
    }
</div>

<!-- Optional Styling -->
<style>
    .list-group-item:hover {
        background-color: #f8f9fa;
    }

    .fw-bold {
        font-weight: bold;
    }
</style>

<script>
    document.getElementById("searchForm").addEventListener("submit", function (event) {
        const searchInput = document.getElementById("searchInput").value.trim();
        if (searchInput === "") {
            event.preventDefault(); // Prevent submitting empty searches
        }
    });
</script>