@model Music.Dtos.AlbumExpandedDto

@{
    Layout = "_Layout";
    ViewData["Title"] = Model.Name;
}

<div class="container mt-4">
    <!-- Album Information -->
    <div class="card shadow-sm mb-4">
        <div class="row g-0">
            <div class="col-md-4">
                <img src="data:image/jpeg;base64,@Model.Image" alt="@Model.Name" class="img-fluid rounded-start" />
            </div>
            <div class="col-md-8">
                <div class="card-body">
                    <h1 class="card-title">@Model.Name</h1>
                    <p class="card-text"><strong>Artist:</strong> @Model.Artist</p>
                    <p class="card-text"><strong>Year:</strong> @Model.Year</p>
                    <p class="card-text">
                        <strong>Average Score:</strong> @Model.AverageScore/5.0
                        (<strong>@Model.ReviewCount</strong> reviews)
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Reviews Section -->
    <div class="mb-5">
        <h2>Reviews</h2>
        @if (Model.Reviews.Any())
        {
            <ul class="list-group">
                @foreach (var review in Model.Reviews)
                {
                    <li class="list-group-item">
                        <h5>
                            <a href="/Users/Profile/@review.PosterId" class="text-decoration-none text-primary">
                                @review.PosterName
                            </a>
                        </h5>
                        <p><strong>Score:</strong> @review.Value/5</p>
                        <p>@review.Message</p>
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="text-muted">No reviews yet. Be the first to review this album!</p>
        }
    </div>

    <!-- Add Review Form (Conditionally Rendered) -->
    <div id="addReviewForm" style="display: none;" class="card shadow-sm p-4">
        <h2 class="text-center">Add Your Review</h2>
        <form id="reviewForm" method="post">
            <div class="form-group mb-3">
                <label for="reviewValue" class="form-label">Score (1-5):</label>
                <input type="number" id="reviewValue" name="Value" class="form-control" min="1" max="5" required />
            </div>
            <div class="form-group mb-3">
                <label for="reviewMessage" class="form-label">Message:</label>
                <textarea id="reviewMessage" name="Message" class="form-control" rows="4" required></textarea>
            </div>
            <button type="submit" class="btn btn-primary w-100">Submit Review</button>
        </form>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const addReviewForm = document.getElementById("addReviewForm");

        // Check if JWT exists in local storage
        if (localStorage.jwt) {
            const jwtObject = JSON.parse(localStorage.getItem("jwt")); // Retrieve JWT object
            const token = jwtObject?.value;    // Access the value property
            const expiry = jwtObject?.expiry; // Access the expiry property

            const now = new Date();

            // Validate the JWT expiry
            if (!!expiry && new Date(expiry) > now) {
                // User is logged in, show the form
                addReviewForm.style.display = "block";

                // Add form submission handler
                const reviewForm = document.getElementById("reviewForm");
                reviewForm.addEventListener("submit", async (event) => {
                    event.preventDefault();

                    const formData = new FormData(reviewForm);
                    const reviewData = Object.fromEntries(formData.entries());
                    reviewData.AlbumId = @Model.Id;

                    try {
                        const response = await fetch("/api/Review", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                "Authorization": `Bearer ${token}`
                            },
                            body: JSON.stringify(reviewData)
                        });

                        if (response.ok) {
                            alert("Review added successfully!");
                            location.reload(); // Refresh the page to show the new review
                        } else {
                            const error = await response.json();
                            alert(error.message || "Failed to submit the review.");
                        }
                    } catch (error) {
                        console.error("Error submitting review:", error);
                        alert("An unexpected error occurred. Please try again.");
                    }
                });
            } else {
                // Token expired or invalid, remove it
                localStorage.removeItem("jwt");
            }
        }
    });
</script>
